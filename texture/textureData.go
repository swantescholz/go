package texture

import (
	"github.com/banthar/gl"
	. "fmt"
	. "ogo/glmath/color"
	"ogo/globals"
	"ogo/program"
	"ogo/util"
)


type TextureData struct {
	id gl.Texture
	path string
	//stdMat mat4.Mat4
	Pix *PixelGrid
	Mips []*PixelGrid
}

func (t *TextureData) String() string {
	return Sprintf("%v, %v", t.id, t.path)
}

func NewTextureData(name string) *TextureData {
	tb := &TextureData{0, name, nil, make([]*PixelGrid,0)}
	tb.GenTexture()
	return tb
}
func NewTextureDataFromFile(path string) *TextureData {
	var tb = NewTextureDataFromPixelGrid(NewPixelGridFromFile(path))
	tb.path = path
	return tb
}
func NewTextureDataFromPixelGrid(pg *PixelGrid) *TextureData {
	tb := NewTextureData("___EXPLICIT_PIXELGRID___")
	tb.Pix = pg
	tb.CreateMipmaps()
	tb.LoadIntoGL()
	return tb
}

//clears the opengl texture memory
func (t *TextureData) Destroy() {
	t.id.Delete()
	t.Pix, t.Mips = nil,nil
}

func (t *TextureData) GenTexture() {
	t.id = gl.GenTexture()
	if t.id==0 {panic("0 id generated by gl.GenTexture()")}
}
func (t *TextureData) Id    () gl.Texture {return t.id}
func (t *TextureData) Name  () string {return t.path}
func (t *TextureData) Sizes () (int, int) {return t.Pix.Sizes()}
func (t *TextureData) Width () int {w,_ := t.Pix.Sizes(); return w}
func (t *TextureData) Height() int {_,h := t.Pix.Sizes(); return h}

func (t *TextureData) CreateMipmaps() {
	var w,h = t.Width(), t.Height()
	if globals.TextureHasToBePot {
		w, h = util.NextLowerPot(w), util.NextLowerPot(h)
	}
	if globals.TextureHasToBeSquare {
		if h > w {h = w}
		if w > h {w = h}
	}
	var pix = t.Pix
	for w > 0 && h > 0 {
		pix = pix.CreateMipmap(w,h)
		t.Mips = append(t.Mips, pix)
		w, h = w/2, h/2
	}
}

func (t *TextureData) LoadIntoGL() {
	t.id.Bind(gl.TEXTURE_2D)
	for i,v := range t.Mips {
		gl.TexImage2D(gl.TEXTURE_2D, i, gl.RGBA, v.w, v.h, 0, gl.RGBA, gl.UNSIGNED_BYTE, v.Pix)
		if !globals.CreateMipmaps {
			gl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.LINEAR)
			gl.TexParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.LINEAR)
			break //just one level if no mipmaps are wanted
		}
	}
	t.Unbind()
}

func (t *TextureData) BindForSkybox() {
	t.id.Bind(gl.TEXTURE_2D)
}
//AFTER program.Use()!
func (t *TextureData) Bind() {
	if globals.UseShader {
		program.SetTexture(t)
	} else {
		t.id.Bind(gl.TEXTURE_2D)
	}
}
func (t *TextureData) Unbind() {
	t.id.Unbind(gl.TEXTURE_2D)
}




